import streamlit as st

st.title('Section6：ロジックツリーの作成')
st.text('本ページでは、Codingの流れ・各段階ごとの生成物を整理するうえで強力なツールである\n「ロジックツリー」について解説します。')
st.header('1. ロジックツリーとは')
st.text('ロジックツリーとはCodeの論理展開を視覚的に表現したツリー構造の図のことであり、\nいわば「Codeの設計図」です。\n具体例としては以下のようなものが挙げられます。')



st.header('2. ロジックツリーの作成方法')
st.text('ロジックツリーはPowerPoint・ExcelなどのOffice標準ツールを用いて作成することが可能ですが、\nフローチャートの作成に特化したMicrosoft Visioを用いるとより簡易的に作成することができます。')
st.text('※Visioファイルを作成するためにはDesktop版Visioのインストールが必要です。\nMODECのOffice365で使用可能ですので、IT部へインストール依頼をかけてください。')

st.header('3. ロジックツリーを作成するメリット')
st.text('ロジックツリーを作成するメリットとして、以下の2つが挙げられます。')
st.subheader('1. Codeの整理を行うことができる')
st.text('Engineering業務で用いるような複雑なPython Codeにおいては、\n時にCoding中に計算処理の流れを見失う危険性があります。\nそういった際にあらかじめCodeの論理構成を視覚的にまとめたロジックツリーがあれば、^n\n容易に正しいCodingルートへと戻ることができます。')

st.subheader('2. 第三者のCode理解に役立つ')
st.text('Engineering業務で用いるin-houseツールのなかには制作責任者不明であるために\nCodeを解読することが難しく、一度壊れてしまうと復旧が不可能であるものがいくつか見受けられます。\nロジックツリーはCodeの設計図であるため、第三者によるCode解読において強力な手助けとなりえます。')

st.text('これでロジックツリーについての解説を終わります。\n次章では最終章として、「生成AIの活用」について解説します。')
